@page "/quizresult"
@using System.Diagnostics;
@using Tool.Shared
@inject HttpClient _http
@inject HttpClient _Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="container">
    <div class="container-heading">
        Quiz Category :  <b>@quizList.FirstOrDefault()?.QuizTitle</b>
    </div>
    <div class="Content">
        <h5>
            Score : @score.FirstOrDefault()?.ObtainedScore
        </h5>
        <br />
        <h5>
            Result :
            @if (@scoreViewModels.ObtainedScore > 70)
            {
                <text>Pass</text>
            }
            else
            {
                <text>Fail</text>
            }
        </h5>
    </div>
    <div class="login-actions">
        <button class="btn" @onclick="Exit">Exit</button>
    </div>
</div>

@code {
    List<ScoreViewModel> score = new List<ScoreViewModel>();
    string result = "";
    private ScoreViewModel scoreViewModels = new Tool.Shared.ScoreViewModel();
    List<AddQuizCategoryViewModel> quizList = new List<AddQuizCategoryViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await getQuizCategory();
        await getScore();
    }

    async Task getQuizCategory()
    {
        var response = await _http.GetAsync("api/quiz");
        response.EnsureSuccessStatusCode();
        quizList = await response.Content.ReadFromJsonAsync<List<AddQuizCategoryViewModel>>();
        foreach (var q in quizList)
        {
            Debug.WriteLine(q.QuizTitle);
        }
    }
    async Task getScore()
    {
        var response = await _http.GetAsync("api/score");
        response.EnsureSuccessStatusCode();
        score = await response.Content.ReadFromJsonAsync<List<ScoreViewModel>>();
        foreach (var q in score)
        {
            Debug.WriteLine(q.ObtainedScore);
        }

    }


    void Exit()
    {
        NavigationManager.NavigateTo("/");
    }
}
