@page "/editquestion/{Id}"
@using Tool.Shared
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
<PageTitle>EditQuestions</PageTitle>

<div class="Container">
    <div class="Container-heading">
        <h2>Edit Question</h2>
    </div>
    <form class="input-form">

        <div class="Quiz-name form-input">
            <label for="quiz-category">Quiz Category Name :</label>
        </div>
        <div class="Question-Text form-input">
            <label for="question-text">Question Text </label>
            <textarea id="question-text" name="question-text" @bind="@question.QuestionText" required></textarea>
        </div>
        <div class="input-options form-input">
            <label for="option1" class="checkbox-label">Option 1 : </label>
            <input type="text" id="option1" name="option1" @bind="@question.OptionOne" required>
            <input type="checkbox" id="myCheckbox">
        </div>
        <div class="input-options form-input">
            <label for="option2" class="checkbox-label">Option 2 :</label>
            <input type="text" id="option2" name="option2" @bind="@question.OptionTwo" required>
            <input type="checkbox" id="myCheckbox">
        </div>
        <div class="input-options form-input">
            <label for="option3" class="checkbox-label">Option 3 :</label>
            <input type="text" id="option3" name="option3" @bind="@question.OptionThree">
            <input type="checkbox" id="myCheckbox">
        </div>
        <div class="input-options form-input">
            <label for="option4" class="checkbox-label">Option 4 :</label>
            <input type="text" id="option4" name="option4" @bind="@question.OptionFour">
            <input type="checkbox" id="myCheckbox">
        </div>

        <div class="Form-actions">
            <button type="reset" @onclick="@Cancel" class="btn">Cancel</button>
            <button type="submit" @onclick="@SaveQuestion" class="btn active">Save</button>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    QuestionViewModel question = new QuestionViewModel();
    protected override async Task OnInitializedAsync()
    {
        question = await Http.GetFromJsonAsync<QuestionViewModel>("api/Question/" + Id);
    }
    protected async Task SaveQuestion()
    {
        var response = await Http.PutAsJsonAsync("api/Question/" + Id, @question);
        bool questionResponse = await response.Content.ReadFromJsonAsync<bool>();
        if (questionResponse)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Updated Successfully!");
            NavigationManager.NavigateTo("editquizcategory");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("editquizcategory");
    }
}
