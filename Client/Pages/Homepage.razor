@page "/homepage"
@using Tool.Shared
@inject HttpClient _http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<Sidebar></Sidebar>



<PageTitle>Home Page</PageTitle>
   
        <div class="master p-4">
            <br />
            <br/>
            <div class="center">
            <div class="login-actions">
            <button type="button" class=" btn btnADD" data-bs-toggle="modal" data-bs-target="#addquizcategorymodel">Add Quiz Category</button>
            </div>
           
        @if (quizList != null)
        {
            <table class="master-table table table-striped table-borderless">
                <thead>
                    <tr class="master-head">
                        <th class="master-head"><b>Category</b></th>
                        <th class="master-head"><b>Uploaded By</b></th>
                        <th class="master-head"><b>Allowed Time</b></th>
                        <th class="master-head"><b>Action</b></th>
                    </tr>
                </thead>
                <tbody class="master-table3">
                    @if (quizList != null)
                    {
                        @foreach (var q in quizList)
                        {
                            <tr class="master-row">
                                <td class="master-tablebody">@q.QuizTitle</td>
                                <td class="master-tablebody">Prabhat Vishwakarma</td>
                                <td class="master-tablebody">@q.Timer</td>
                                <td class="master-tablebody">
                                    <button @onclick="EditQuiz" class="btn"><i class="fa fa-edit"></i></button>
                                    <button @onclick="AddQuestion" class="btn"><i class="fa-solid fa-circle-plus"></i></button>
                                    <button class="btn"><i class="fa-regular fa-trash-can"></i></button>
                                </td>
                            </tr>
                        }
                    }
                   
                </tbody>
            </table>
        }           
        </div>
        </div>
    <!-- Modal -->
   <div class="modal fade " id="addquizcategorymodel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Add Quiz Category</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=@Okay></button>
                </div>
               @* <EditForm Model="@quiz">*@
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-body">
               
                 

                <form class="input-form">

                    <div class="Quiz-name form-input">
                        <label for="quiz-category">Quiz Category Name </label>
                        <input type="text" id="quiz-category" form="QuizTitle" @bind="@quiz.QuizTitle" disabled="@validResponse" required>
                            @*<ValidationMessage For="@(() => quiz.QuizTitle)"></ValidationMessage>
                            <span asp-validation-for="quiz-category"></span>*@
                            @if ((string.IsNullOrEmpty(@quiz.QuizTitle) || string.IsNullOrWhiteSpace(@quiz.QuizTitle)) && flag)
                            {
                                @*@quiz.QuizTitle*@
                                <br /> <div class="text-danger">This value can't be Empty</div>
                            }
                    </div>
                    <div class="Allowed-Time form-input">
                        <label for="allowed-time">Allowed Time in minutes </label>
                        <input class="time-input" type="number" id="allowed-time" min="1" @bind="@quiz.Timer" form="Timer" disabled="@validResponse" required>
                            @if (quiz.Timer < 1 && flag)
                            {
                                <br /> <div class="text-danger">The timer value must be greater than or equal to 1.</div>
                            }

                    </div>
                
                </form>
                </div>
                <div class="modal-footer">
                @if (!validResponse)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Cancel">Close</button>
                    <button type="button" class="btn btn-success" @onclick="Save">Save changes</button>
                }
                else
                {
                    <div>Record Saved</div>
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal" aria-label="modal" @onclick="Okay">Ok</button>
                }

           @*     <button type="button" class="btn btn-success" @onclick="Save" data-bs-dismiss="modal" aria-label="Close">Save changes</button>*@
            </div>

             @*   </EditForm >*@
            </div>
        </div>
    </div>


   
   

@code {
    List <HomeViewModel> quizList = new List <HomeViewModel>();

    bool flag = false;
    bool validResponse = false;

    async void getQuizCategory()
    {
        var response = await _http.GetAsync("api/quiz");
        response.EnsureSuccessStatusCode();
        quizList = await response.Content.ReadFromJsonAsync<List<HomeViewModel>>();
        foreach (var q in quizList)
        {
            Console.WriteLine(q.QuizTitle);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        getQuizCategory();
    }



    void EditQuiz()
    {
        NavigationManager.NavigateTo("/editquizcategory");
    }
    void AddQuestion()
    {
        NavigationManager.NavigateTo("/AddQuestion");
    }
    AddQuizCategoryViewModel quiz = new AddQuizCategoryViewModel
        {
            QuizTitle = "",
            Timer = 0
        };



    protected async Task Save()
    {
        Console.WriteLine("Save");
        this.flag = true;
        if (quiz.Timer >= 1 && quiz.QuizTitle != "")
        {
            var response = await _http.PostAsJsonAsync("api/quiz", @quiz);
            bool jsonResponse = await response.Content.ReadFromJsonAsync<bool>();
            if (jsonResponse)
            {
                getQuizCategory();
                Console.WriteLine("saved");
                this.validResponse = true;

            }

        }
    }
    void Okay()
    {
        this.validResponse = false;
        this.flag = false;
        quiz.QuizTitle = "";
        quiz.Timer = 0;
        NavigationManager.NavigateTo("/homepage");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/homepage");
    }


}